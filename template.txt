# ログインページ
We need to prepare for web app security training so please make your web site with the following conditionsConditions
 - Login Page
 - Contains vulnerabilities related to SQL injection (for education)
 - Use mysqli
 - Prepare one PHP file (index.php, embed html) and one CSS file (style.css).
 - DB information is obtained from .env with vlucas/phpdotenv.
 - DB host is obtained from .env by HOST.
 - DB user is obtained from .env by USER.
 - DB password is obtained from .env by PASSWORD.
 - DB name is obtained from .env by DATABASE.
 - Table name is users
 - 3 columns: id, name, password
 - Output hint and answer in code block (```hint``` for example: ```hint\ndescription)\n```, ```csv```)
 - Don't make the hint lead directly to the answer
 - Output answer in csv format(answer, description) example: ```' OR '1' = '1', description```
 - Stylish design

Webアプリのセキュリティトレーニングの準備が必要なので、以下の条件でWebサイトを作成してください。
 - ログインページ
 - SQLインジェクションに関する脆弱性を含む（教育版）
 - mysqliを使う
 - PHPファイル(index.php, htmlを埋め込む)を1つ、CSSファイル(style.css)を1つ用意する。
 - DB情報は.envからvlucas/phpdotenvで取得。
 - DBホストは.envからHOSTで取得。
 - DBユーザーは.envからUSERで取得。
 - DBのパスワードは.envからPASSWORDで取得する。
 - DB名は.envからDATABASEで取得する。
 - テーブル名はusers
 - 3つのカラム: id, name, password
 - ヒントと答えをコードブロックに出力 (```hint```, ```csv```)
 - ヒントが直接答えにつながらないようにすること
 - 答えをcsv形式で出力する(答え, 説明) 例: ``' OR '1' = '1', 説明``'
 - スタイリッシュなデザイン

# 商品検索ページ×コメントアウト
We need to prepare for web app security training so please make your web site with the following conditionsConditions
 - Product search page
 - Contains vulnerabilities related to SQL injection (educational version)
 - SQL executes `SELECT name, price FROM products WHERE name = '$keyword`.
 - Use PDO
 - Prepare one PHP file (index.php, embed html) and one CSS file (style.css)
 - DB information is obtained from .env with vlucas/phpdotenv.
 - DB host is obtained from .env by HOST.
 - DB user is obtained from .env by USER.
 - DB password is obtained from .env by PASSWORD.
 - DB name is obtained by DATABASE from .env.
 - Table name is products
 - 3 columns: product_id, name, price
 - output hints and answers in code blocks (```hint```, ```csv```)
 - Make sure that the hints do not lead directly to the answers
 - Output answers in csv format (answer, description) e.g.: ``'' OR 1 = 1 --, description``'
 - Stylish design

Webアプリのセキュリティトレーニングの準備が必要なので、以下の条件でWebサイトを作成してください。
 - 商品検索ページ
 - SQLインジェクションに関する脆弱性を含む（教育版）
 - SQLは`SELECT name, price FROM products WHERE name = '$keyword'`を実行する
 - PDOを使う
 - PHPファイル(index.php, htmlを埋め込む)を1つ、CSSファイル(style.css)を1つ用意する。
 - DB情報は.envからvlucas/phpdotenvで取得。
 - DBホストは.envからHOSTで取得。
 - DBユーザーは.envからUSERで取得。
 - DBのパスワードは.envからPASSWORDで取得する。
 - DB名は.envからDATABASEで取得する。
 - テーブル名はproducts
 - 3つのカラム: product_id, name, price
 - ヒントと答えをコードブロックに出力 (```hint```, ```csv```)
 - ヒントが直接答えにつながらないようにすること
 - 答えをcsv形式で出力する(答え, 説明) 例: ``' OR 1 = 1 --, 説明``'
 - スタイリッシュなデザイン

# 商品検索ページ×UNIONインジェクション
We need to prepare for web app security training so please make your web site with the following conditionsConditions
 - Product search page
 - Contains vulnerabilities related to UNION injection (educational version)
 - SQL executes `SELECT name, price FROM products WHERE name LIKE '%$keyword%'`.
 - Use PDO
 - Prepare one PHP file (index.php, embed html) and one CSS file (style.css).
 - DB information is obtained from .env with vlucas/phpdotenv.
 - DB host is obtained from .env by HOST.
 - DB user is obtained from .env by USER.
 - DB password is obtained from .env by PASSWORD.
 - DB name is obtained by DATABASE from .env.
 - Table name is products
 - 3 columns: product_id, name, price
 - Output hints and answers in code blocks (```hint```, ```csv```)
 - Make sure that the hint does not lead directly to the answer.
 - Output answers in csv format (answer, description) e.g.: ```' UNION SELECT name, '' FROM users --, description```
 - Stylish design

Webアプリのセキュリティトレーニングの準備が必要なので、以下の条件でWebサイトを作成してください。
 - 商品検索ページ
 - UNIONインジェクションに関する脆弱性を含む（教育版）
 - SQLは`SELECT name, price FROM products WHERE name LIKE '%$keyword%'`を実行する
 - PDOを使う
 - PHPファイル(index.php, htmlを埋め込む)を1つ、CSSファイル(style.css)を1つ用意する。
 - DB情報は.envからvlucas/phpdotenvで取得。
 - DBホストは.envからHOSTで取得。
 - DBユーザーは.envからUSERで取得。
 - DBのパスワードは.envからPASSWORDで取得する。
 - DB名は.envからDATABASEで取得する。
 - テーブル名はproducts
 - 3つのカラム: product_id, name, price
 - ヒントと答えをコードブロックに出力 (```hint```, ```csv```)
 - ヒントが直接答えにつながらないようにすること
 - 答えをcsv形式で出力する(答え, 説明) 例: ```' UNION SELECT name, '' FROM users --, 説明```
 - スタイリッシュなデザイン

# 商品検索ページ×OSコマンドインジェクション
We need to prepare for web app security training so please make your web site with the following conditionsConditions
 - Looks like a product search page
 - cat products". Execute $product_id.".txt
 - Contains vulnerabilities related to OS command injection that displays the output of the command (for educational purposes)
 - Prepare one PHP file (index.php, embed html) and one CSS file (style.css)
 - Output hints and answers in code blocks (``hint``, ``csv``)
 - Ensure that the hints do not lead directly to the answer.
 - Output answers in csv format (answer, description) e.g.: ```; ls #, description``
 - Stylish design
 - Use the safe_shell_exec function from safe_shell_exec.php in the directory 2 levels above the function that executes the command

Webアプリのセキュリティトレーニングの準備が必要なので、以下の条件でWebサイトを作成してください。
 - 見た目は商品検索ページ
 - cat products".$product_id.".txtを実行する
 - コマンドの出力を表示するOSコマンドインジェクションに関する脆弱性を含む（教育用）
 - PHPファイル(index.php, htmlを埋め込む)とCSSファイル(style.css)を1つずつ用意する。
 - ヒントと答えをコードブロックに出力 (```hint```, ```csv```)
 - ヒントが直接答えにつながらないようにすること
 - 答えをcsv形式で出力する(答え, 説明) 例: ```; ls #, 説明```
 - お洒落なデザイン
 - コマンドを実行する関数2つ上のディレクトリにあるsafe_shell_exec.phpのsafe_shell_exec関数を使うこと

 # 予約管理アプリ×コメントアウト
 We need to prepare for web app security training so please make your web site with the following conditionsConditions
 - Reservation Management Page
 - Contains vulnerabilities related to SQL injection (educational version)
 - SQL executes `SELECT name, date, room_id FROM products WHERE name = '$keyword'`.
 - Use PDO
 - Prepare one PHP file (index.php, embed html) and one CSS file (style.css).
 - DB information is obtained from .env with vlucas/phpdotenv.
 - DB host is obtained from .env by HOST.
 - DB user is obtained from .env by USER.
 - DB password is obtained from .env by PASSWORD.
 - DB name is obtained from .env by DATABASE.
 - Table name is products
 - 4 columns: id, name, date, room_id
 - output hints and answers in code blocks (```hint```, ```csv```)
 - Do not allow hints to lead directly to the answer.
 - Output answer in csv format (answer, description) e.g.: ```' OR 1 = 1 --, description```
 - Stylish design
 
 Webアプリのセキュリティトレーニングの準備が必要なので、以下の条件でWebサイトを作成してください。
 - 予約管理ページ
 - SQLインジェクションに関する脆弱性を含む（教育版）
 - SQLは`SELECT name, date, room_id FROM products WHERE name = '$keyword'`を実行する
 - PDOを使う
 - PHPファイル(index.php, htmlを埋め込む)を1つ、CSSファイル(style.css)を1つ用意する。
 - DB情報は.envからvlucas/phpdotenvで取得。
 - DBホストは.envからHOSTで取得。
 - DBユーザーは.envからUSERで取得。
 - DBのパスワードは.envからPASSWORDで取得する。
 - DB名は.envからDATABASEで取得する。
 - テーブル名はproducts
 - 3つのカラム: id, name, date, room_id
 - ヒントと答えをコードブロックに出力 (```hint```, ```csv```)
 - ヒントが直接答えにつながらないようにすること
 - 答えをcsv形式で出力する(答え, 説明) 例: ``' OR 1 = 1 --, 説明``'
 - スタイリッシュなデザイン
